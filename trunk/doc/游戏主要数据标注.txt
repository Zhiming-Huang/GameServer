mapping attr = ([
        "str" : "膂力",
        "con" : "根骨",
        "dex" : "身法",
        "sta" : "耐力",
        "kar" : "福缘",
        "cps" : "定力",
        "cor" : "胆识",
        "per" : "容貌",
        "spi" : "灵性",
]);


mapping valid_type = ([
        "unarmed":      "拳脚", "medical":      "医术",
        "claw":         "爪功", "cuff":         "拳功",
        "finger":       "指功", "strike":       "掌功",
        "hand":         "手功", "leg":          "腿功",
        "sword":        "剑法", "blade":        "刀法",
        "dagger":       "短兵", "brush":        "笔法",
        "spear":        "枪法", "hook":         "钩法",
        "stick":        "棒法", "staff":        "杖法",
        "club" :        "棍法", "throwing":     "暗器",
        "whip":         "鞭法", "axe":          "斧法",
        "hammer":       "锤法", "force":        "内功",
        "dodge":        "轻功", "parry":        "招架",
        "poison":       "毒技", "cooking":      "厨艺",
        "chuixiao-jifa":"吹萧", "guzheng-jifa": "古筝",
        "tanqin-jifa":  "弹琴",
]);


mapping dict = ([
        "axe"           :"斧",
        "bow"           :"弓",
        "sword"         :"剑",
        "blade"         :"刀",
        "club"          :"棍",
        "dagger"        :"匕首",
        "fork"          :"叉",
        "hammer"        :"锤",
        "staff"         :"杖",
        "throwing"      :"暗器",
        "whip"          :"鞭",
        "xsword"        :"箫",
        "head"          :"头盔",
        "neck"          :"项链",
        "cloth"         :"衣服",
        "charm"         :"符文",
        "rings"         :"戒指",
        "armor"         :"护甲",
        "surcoat"       :"披风",
        "waist"         :"腰带",
        "wrists"        :"护腕",
        "shield"        :"盾甲",
        "hands"         :"铁掌",
        "boots"         :"靴子",
        "finger"        :"指套",
        "all"           :"所有类型",
]);


"add_skill"     : "所有技能",                   // weapon/rings 终极兵器
"add_damage"    : "追加伤害",                   // weapon 终极兵器
"reduce_damage" : "化解伤害",                   // armor 终极防具 


１）基本轻功 (dodge)	    ８）  基本拳法 (cuff) 
  ２）基本内功 (force)	    ９）  基本刀法 (blade) 
  ３）基本招架 (parry)	    １０）基本棒法 (stick) 
  ４）基本爪法 (claw)	     １１）基本棍法 (club) 
  ５）基本手法 (hand)	     １２）基本杖法 (staff) 
  ６）基本掌法 (strike)	   １３）基本剑法 (sword) 
  ７）基本指法 (finger)	   １４）基本暗器 (throwing) 
  
  call d287364145->set_skill("pixie-jian", 100)


游戏攻击实现路径
1. 首先玩家下达fight kill等指令，如果对方是玩家，则需要对方同意才能进行战斗
然后通过feature/Attack.c里面的fight_ob函数把对方加入到玩家的enemy列表里面, kill的话加入到killer列表里面
2. 每个npc都有心跳函数，当进入心跳函数的时候，执行攻击命令
inherit/Char.c heart_beat函数，在里面执行攻击命令
3. 执行攻击函数attack
feature/Attack.c 里面的attack函数
4. 执行攻击函数fight
adm/deamons/Combatd.c 里面的fight函数

can_speak只有race是human的才会说话
is_character 是否是活物


skills map 存放的是 map 技能名：等级
learned map 存放的是玩家已经学习过的技能 技能名：等级
skill_map map 存放的连招 技能名：技能名
skill_prepare 为基本武功设置激发武功 基本技能名字：技能名 如： prepare_skill("strike", "dragon-strike");

all_skills存放的是技能的输出参数等 ({ attack, dodge, parry, damage, force, difficult, rank, attribute });
如：#技能/攻击/躲闪/招架/伤害/内功/难度/级别/属性 #终极前四项COMBAT之和1100
yinyang-shiertian/600/600/600/600/600/6000/ultimate/public


actions 每中生物都有自己的default_actions 比如在Human.c中：
#define BASE_WEIGHT 40000

inherit F_DBASE;
inherit F_SKILL;

mapping *combat_action = ({
([      "action":               "$N挥拳攻击$n的$l",
        "damage_type":  "瘀伤",
]),
([      "action":               "$N往$n的$l一抓",
        "damage_type":  "抓伤",
]),
([      "action":               "$N往$n的$l狠狠地踢了一脚",
        "damage_type":  "瘀伤",
]),
([      "action":               "$N提起拳头往$n的$l捶去",
        "damage_type":  "瘀伤",
]),
([      "action":               "$N对准$n的$l用力挥出一拳",
        "damage_type":  "瘀伤",
]),
});

如果技能里查询不到action或者是使用unarmed基本拳脚攻击就用这些action

技能升级需要的经验：
learned[skill] > (skills[skill] + 1) * (skills[skill] + 1)


臂力：影响物理命中，臂力越大，物理命中越高；臂力还影响你的饭量和水量；臂力还影响人物的负重，臂力越高负重越大。

悟性：影响学习（包括读书读石壁等）以及修炼特殊内功的效率，悟性越高，学习越快。

根骨：影响升级时加的气血多少，气血恢复速度，修炼特殊内功时的效率以及速度等。

身法：影响普通攻击速度，普通攻击格挡率，普通攻击命中（影响较小），影响技能命中率。


背包

战神甲

铜钱
银子
金子
元宝
0金00银00铜
负重

7ac6dea77d83

最大负重：会员和非会员
if (userp(ob) && MEMBER_D->is_valid_member(ob))
                        ob->set_max_encumbrance(80000 + ob->query("str") * 8000 + ob->query_str() * 1200);
                else
                        ob->set_max_encumbrance(40000 + ob->query("str") * 4000 + ob->query_str() * 600);
